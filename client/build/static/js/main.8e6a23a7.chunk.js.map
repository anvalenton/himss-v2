{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","spamTickets","setSpamTickets","ticket","a","axios","post","process","status","map","elem","state","Error","id","put","filter","get","spamTix","arrOfTix","Object","keys","data","key","undefined","useEffect","getTickets","className","idx","payload","reportType","message","onClick","blockTicket","resolveTicket","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAgHeA,MA1Gf,WAGE,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAHa,4CAKb,WAA2BC,GAA3B,SAAAC,EAAA,+EAG2BC,IAAMC,KAAN,UAAcC,wBAAd,SAAoDJ,GAH/E,OAK4B,MAL5B,OAKiBK,QAEXN,EAAeD,EAAYQ,KAAI,SAACC,GAE9B,OAAIA,IAASP,GACXO,EAAKC,MAAQ,UACND,GAEIA,MAbrB,sDAkBY,IAAIE,MAAM,0BAlBtB,0DALa,kEA6Bb,WAA6BT,EAAQU,GAArC,SAAAT,EAAA,+EAG6BC,IAAMS,IAAN,UAAaP,wBAAb,oBAAsDM,IAHnF,OAK8B,MAL9B,OAKmBL,QAEbN,EAAeD,EAAYc,QAAO,SAACL,GAAD,OAAUA,IAASP,MAP3D,sDAYY,IAAIS,MAAM,4BAZtB,0DA7Ba,kEAgDb,8BAAAR,EAAA,+EAG8BC,IAAMW,IAAN,UAAaT,wBAAb,UAH9B,OAGcU,EAHd,OAIcC,EAAYC,OAAOC,KAAKH,EAAQI,MAAMZ,KAAI,SAACa,GAAD,OAASL,EAAQI,KAAKC,MAAMP,QAAO,SAACL,GAAD,YAAsBa,IAAZb,EAAKG,MAClGX,EAAegB,GALvB,sDASc,IAAIN,MAAM,yBATxB,0DAhDa,sBAmEb,OALAY,qBAAU,YA9DG,mCA+DXC,KAEC,IAID,mCACE,sBAAKC,UAAU,WAAf,UACE,yCAEA,qBAAKA,UAAU,wBAAf,SACKzB,EAAYc,QAAO,SAACL,GAAD,MAAyB,aAAfA,EAAKC,SAAsBF,KAAI,SAACC,EAAMiB,GAE9D,OAAO,sBAAeD,UAAS,2BAAqC,YAAfhB,EAAKC,MAAqB,UAAY,MAApF,UACD,sBAAKe,UAAU,oBAAf,UACE,sBAAKA,UAAU,UAAf,iBAA8BhB,EAAKG,MACnC,sBAAKa,UAAU,UAAf,oBAAiChB,EAAKC,YAGxC,sBAAKe,UAAU,oBAAf,UACE,sBAAKA,UAAU,UAAf,mBAAgChB,EAAKkB,QAAQC,cAC7C,sBAAKH,UAAU,UAAf,sBAAmChB,EAAKkB,QAAQE,cAGlD,sBAAKJ,UAAU,mBAAf,UAEkB,YAAfhB,EAAKC,MAAqB,wBAAQoB,QAAS,kBAzFvD,2CAyF8DC,CAAYtB,IAApC,mBAA6D,KACxF,wBAAQqB,QAAS,kBA1F5B,6CA0FmCE,CAAcvB,EAAMA,EAAKG,KAAjD,0BAdSc,cCtEpBO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8e6a23a7.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState } from \"react\";\nimport axios from 'axios';\n\n\n\nfunction App() {\n\n  \n  const [spamTickets, setSpamTickets] = useState([]);\n\n  async function blockTicket(ticket) {\n\n    try {\n      const blockTix = await axios.post(`${process.env.REACT_APP_API_URI}/spam`, ticket )\n\n      if (blockTix.status === 200) {\n\n        setSpamTickets(spamTickets.map((elem) => {\n         \n          if (elem === ticket) {\n            elem.state = 'BLOCKED'\n            return elem\n          }\n          else {return elem}\n          }))\n\n  }}\n    catch (e) {\n        throw new Error('Unable to Block Ticket');\n    }\n\n  }\n\n\n  async function resolveTicket(ticket, id) {\n\n    try {\n      const resolveTix = await axios.put(`${process.env.REACT_APP_API_URI}/reports/${id}`)\n\n      if (resolveTix.status === 200) {\n      \n        setSpamTickets(spamTickets.filter((elem) => elem !== ticket))\n      }\n\n  }\n    catch (e) {\n        throw new Error('Unable to Resolve Ticket');\n    }\n  }\n\n\n \n  \n  async function getTickets() {\n\n      try {\n          const spamTix = await axios.get(`${process.env.REACT_APP_API_URI}/spam`)\n          const arrOfTix =  Object.keys(spamTix.data).map((key) => spamTix.data[key]).filter((elem) => elem.id !== undefined);\n          setSpamTickets(arrOfTix);\n        \n      }\n      catch (e) {\n          throw new Error('Unable to get tickets');\n      }\n  }\n\n\n  useEffect(() => {\n    getTickets()\n\n  }, [])\n\n  return (\n\n    <>\n      <div className='mainbody'>\n        <h1>Reports</h1>\n\n        <div className='tickets-maincontainer'>\n            {spamTickets.filter((elem) => elem.state !== 'RESOLVED').map((elem, idx) => {\n            \n                  return <div key={idx} className={`ticket-container ${elem.state === 'BLOCKED'? 'blocked' : null}`}>\n                        <div className='idstate-container' >\n                          <div className='infodiv'>Id: {elem.id}</div>\n                          <div className='infodiv'>State: {elem.state}</div>\n                        </div>\n  \n                        <div className='typemsg-container'>\n                          <div className='infodiv'>Type: {elem.payload.reportType}</div>\n                          <div className='infodiv'>Message: {elem.payload.message}</div>\n                        </div>\n  \n                        <div className='button-container'>\n\n                          {elem.state !== 'BLOCKED'? <button onClick={() => (blockTicket(elem))}>Block</button> : null }\n                          <button onClick={() => (resolveTicket(elem, elem.id))}>Resolve</button>\n                        </div>\n                  </div> \n              \n            })}\n           \n        </div>\n\n      </div>\n     \n\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}